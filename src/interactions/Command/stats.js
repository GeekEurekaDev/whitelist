const { CommandInteraction, Client, MessageActionRow, MessageButton } = require('discord.js');
const { SlashCommandBuilder } = require('discord.js');
const Discord = require('discord.js');
const axios = require('axios');
const moment = require('moment-timezone');

const userStats = require('../../database/models/userStats');
const code = require('../../database/models/code');
module.exports = {
    data: new SlashCommandBuilder()
        .setName('stats')
        .setDescription('View stats of the user')
        .addUserOption(option => option.setName('user').setDescription('Enter a user').setRequired(false)),
    /** 
     * @param {Client} client
     * @param {CommandInteraction} interaction
     * @param {String[]} args
     */

    run: async (client, interaction, args) => {
        await interaction.deferReply();

        const user = interaction.options.getUser('user') || interaction.user;
        const codes = await code.find({ GeneratedBy: user.id });
        const userStatsData = await userStats.findOne({ User: user.id });

        if (!codes.length) {
            return interaction.followUp({ content: 'No codes found for this user.', ephemeral: true });
        }

        const embed = new Discord.EmbedBuilder()
            .setTitle(`Codes generated by @${user.tag}`)
            .setColor('#0099ff')

            .addFields([{ name: 'Generated Codes', value: userStatsData.GeneratedCodes.toString(), inline: true }])
            .addFields([{ name: 'Invited by', value: userStatsData.RedeemedCodes.toString(), inline: true }])
            .addFields([{ name: 'Blacklisted', value: userStatsData.Blacklisted ? 'Yes' : 'No', inline: true }])
        
        for (const codeData of codes) {
            const generatedAt = moment(codeData.GeneratedAt).format('MMMM Do YYYY, h:mm:ss a');
            const redeemedAt = codeData.ReedemedAt ? moment(codeData.ReedemedAt).format('MMMM Do YYYY, h:mm:ss a') : 'Not yet redeemed';
            const redeemedBy = codeData.ReedemedBy ? (await client.users.fetch(codeData.ReedemedBy)).tag : 'Not yet redeemed';
        
            embed.addFields([{ name: `Code: ${codeData.Code}`, value: `> Generated at: ${generatedAt}\n> Redeemed by: @${redeemedBy}\n> Redeemed at: ${redeemedAt}`}]);
            
            if (codeData.Admin) {
                const limit = codeData.Limit;
                const redeemedByUsers = await Promise.all(codeData.Redeems.map(userId => client.users.fetch(userId)));
                const redeemedByUserTags = redeemedByUsers.map(user => `@${user.tag}`).join(', ');
        
                embed.addFields([
                    { name: 'Limit', value: limit.toString(), inline: true },
                    { name: 'Redeemed by', value: redeemedByUserTags, inline: true },
                    { name: 'Admin', value: 'True', inline: true }
                ]);
            }
        }

        await interaction.followUp({ embeds: [embed]});
    },
};